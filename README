# 🏬 Java Mall System — Design Patterns Implementation

## 📖 Project Overview
This Java-based project simulates a command-line shopping mall system designed to demonstrate the practical use of **object-oriented design principles** and **12 core design patterns**. It includes a modular architecture, extensibility, and an intuitive CLI interface for customer interaction.

The application models real-world shopping behaviors: browsing stores, adding items to a cart, selecting payment methods, checking out, saving/restoring carts, and simulating order lifecycle transitions.

---

## 🔍 Applied Design Patterns
| Design Pattern            | Role in System                                                                 |
|--------------------------|------------------------------------------------------------------------------|
| **Singleton**            | Manages single instances of store factories                                  |
| **Factory / Abstract Factory** | Handles creation of different stores and products                        |
| **Iterator**             | Traverses customers, items, and stores without exposing internals            |
| **Strategy**             | Allows dynamic selection of payment methods                                  |
| **Observer**             | Notifies customer via email on cart actions                                  |
| **Memento**              | Saves and restores shopping cart state                                       |
| **Command**              | Encapsulates actions like placing, modifying, and canceling orders           |
| **State**                | Controls order lifecycle transitions                                         |
| **Proxy**                | Controls and secures access to review functionality                          |
| **Decorator**            | Adds dynamic discounts to items without altering original class              |
| **Chain of Responsibility** | Stacks discount logic in an organized, scalable way                     |

---

## 🎯 Features
- One interactive customer session
- Three store types: **BookWorld**, **ShoeZone**, **GameSpot**
- Each store contains **five unique items**
- Cart supports dynamic **save/restore (Memento)**
- Payment via **Credit Card or PayPal** (Strategy)
- Notifications sent via **Observer Pattern**
- Reviews handled securely using **Proxy**
- Orders simulate transitions via **State Pattern**
- Dynamic discounts applied via **Decorator + CoR**

---

## 🛠 How to Run

### 📦 Prerequisites
- Java 17 or higher installed
- CLI terminal or supported IDE (e.g. IntelliJ IDEA, Eclipse)

### 🧪 Compile and Run
Assuming your folder is structured like this:
```
project/
├── src/
│   └── shoppingmall/
│       └── MainApp.java
│       └── (other shoppingmall classes/packages)
```

1. **Compile**:
```bash
javac -d bin src/shoppingmall/**/*.java
```

2. **Run** (MainApp is inside the `shoppingmall` package):
```bash
java -cp bin shoppingmall.MainApp
```

3. **Usage Flow**:
- Enter your name to start
- View available stores
- Browse store inventory
- Add items to cart
- Save/restore your cart state
- Choose payment method and checkout
- Submit or view product reviews
- Simulate full order lifecycle (New → Delivered)

---

## 📁 Project Structure
```
shoppingmall/               # Domain and business logic
├── factories/              # Store creation (Factory/Singleton)
├── payment/                # Payment methods (Strategy)
├── observer/               # Notification system (Observer)
├── command/                # Order management (Command)
├── memento/                # Cart state (Memento)
├── state/                  # Order states (State)
├── proxy/                  # Review access control (Proxy)
├── discount/               # Discounts (Decorator + CoR)
└── MainApp.java            # CLI interface entry point
```

---

## ✅ Project Requirements Checklist
- [x] One interactive customer
- [x] Three stores implemented via factory pattern
- [x] Five items in each store
- [x] CLI with interactive navigation
- [x] Implementation of 10+ design patterns

---

## 🙌 Author
**Yahya** — Software Developer | Design Pattern Enthusiast

---

## 📌 License
This project is released for educational purposes under the MIT License.

Let the patterns power your project! 🧠✨

